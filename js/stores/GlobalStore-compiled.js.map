{"version":3,"sources":["GlobalStore.js"],"names":[],"mappings":"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","file":"GlobalStore-compiled.js","sourcesContent":["\nimport {observable, computed, action, reaction, when } from 'mobx'\nimport Api from '../api/index'\nimport _ from 'lodash';\nimport {snapshotModel, resetSnapshot} from './methods/snapshot'\nimport {subStores} from './substores/'\n\nimport {mapStores} from './MobxUtils'\n\n/**\n * This file is designed to funnel the global state of the application, accessible via the @observable substores object.\n */\n\n\nclass GlobalStore {\n\n    @observable substores = {};\n\n    constructor() {\n        this.substores = mapStores(subStores); // After this global store class is instatiated via the constructor function,\n                                                // map the substores to this object\n        var {UiStore, UndoStore} = this.substores; // you can even deconstruct the state immidiately after instantiation,\n\n        reaction(() => this.snapshot, this.pushSnapshotAndSave); // and bind reactions to the global actions below\n\n        reaction(() => UndoStore.snapshots.length > 1, (bool) => UiStore.displayUndo = bool); // or bind reactions to and from the substores\n\n    }\n\n    pushSnapshotAndSave = async (snapshot) => {\n        let {UndoStore, UiStore} = this.substores;\n\n        if (snapshot && UiStore.autoSaveDrafts) {\n            UndoStore.pushSnapshot(snapshot);\n            UiStore.displayUndo = true;\n            setTimeout(() => {\n                //Api.saveDraft(snapshot);\n            }, 12000)\n        } else {\n            console.log('no snapshot saved!')\n        }\n\n    };\n\n    resetState() {\n        let {UndoStore, UiStore, ColorStore} = this.substores;\n        let lastSnapshot = UndoStore.snapshots.length > 1 && UndoStore.snapshots[1];\n        if (lastSnapshot) {\n\n            UiStore.autoSaveDrafts = false; // turn off the un-intended side-effect of saving state when\n\n            // here is where the entire application state is reset based on the last snapshot, see Snapshot.js\n            this.substores = resetSnapshot(lastSnapshot, this.substores);\n            UndoStore.popSnapshot();\n\n            UiStore.autoSaveDrafts = true; // back on\n        }\n    }\n\n    @action\n    login = async () => {\n        let {UserStore, UiStore} = this.substores;\n        UserStore.currentUser = await Api.getCurrentUser(); // actions can be asynchronus\n        UiStore.loggedIn = true;\n    }\n\n    @action\n    logout() {\n        let {UserStore, UiStore, ColorStore, WordStore} = this.substores;\n        UserStore.currentUser = {};// async\n        UiStore.loggedIn = false;\n    }\n\n    @computed\n    get phrase() {\n        let {UserStore, FormStore} = this.substores;\n        if (UserStore.currentUser.name) {\n            return FormStore.header + \", \" + UserStore.currentUser.name;\n        } else {\n            return null\n        }\n    }\n\n    @computed\n    get searchedUsers() {\n        var {UiStore, UserStore} = this.substores;\n        return UserStore.users.filter(user => user.name.toLowerCase().includes(UiStore.searchText.toLowerCase()))\n    }\n\n    @computed\n    get snapshot() {\n        return snapshotModel(this.substores)\n    }\n}\n\n\nexport default new GlobalStore();"]}