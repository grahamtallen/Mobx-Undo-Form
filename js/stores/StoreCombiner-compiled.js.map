{"version":3,"sources":["StoreCombiner.js"],"names":[],"mappings":";;;;;;;AAGA,0BAAkE,AAClE,mCAA8B,2CAC9B,8BAAuB,6CAEvB,2CAAyD;AACzD,uCAAsC;;AAEhC,WAAW;;;;AAIb,sBAAc;AACV,iBAAE,OAAO,sBAAY,SAAC,KAAK,CAAE,GAAG,CAAK;AACjC,MAAK,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAG,KAAK,CAAA,AAC9C,CAAC,CAAC;;AACwB,IAAI,CAAC,MAAM,CAAjC,SAAS,SAAT,SAAS,CAAE,OAAO,SAAP,OAAO;AACvB;AACI,kBAAM,MAAK,QAAQ,CAAA;AACnB,iBAAO,QAAQ;AACX,SAAS,CAAC,YAAY,CAAC,QAAQ,CAAC;;AAAC,AAEjC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,yDAC3C,CACJ;;;;;;AAAC,AAIF,mBAAS,kBAAM,MAAK,QAAQ,CAAA,CAAE,kBAAM,MAAK,aAAa,EAAE,CAAA,CAAC,CAAC,AAC7D;;;;AAGY;AACkB,IAAI,CAAC,MAAM,CAAjC,SAAS,UAAT,SAAS,CAAE,OAAO,UAAP,OAAO;AACvB,4BAAc,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AACnD,SAAS,CAAC,WAAW,EAAE,CAAC,AAC3B;;;;AAGO;AACuB,IAAI,CAAC,MAAM,CAAjC,SAAS,UAAT,SAAS,CAAE,OAAO,UAAP,OAAO;AACvB,SAAS,CAAC,WAAW,CAAG,gBAAI,cAAc,EAAE;AAAC,AAC7C,OAAO,CAAC,QAAQ,CAAG,IAAI,CAAC,AAC3B;;;;AAGQ;AACkC,IAAI,CAAC,MAAM,CAA7C,SAAS,UAAT,SAAS,CAAE,OAAO,UAAP,OAAO,CAAE,UAAU,UAAV,UAAU;AACnC,SAAS,CAAC,WAAW,CAAG,EAAE;AAAC,AAC3B,OAAO,CAAC,QAAQ,CAAG,KAAK,CAAC;AACzB,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,AAC1B;;;;AAGa;AACL,UAAU,CAAI,IAAI,CAAC,MAAM,CAAzB,UAAU;AACf,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,AAE1B;;;;;;;;;;;AASe;AACe,IAAI,CAAC,MAAM,CAAjC,SAAS,UAAT,SAAS,CAAE,OAAO,UAAP,OAAO;AACvB,GAAI,SAAS,CAAC,SAAS,CAAC,MAAM,GAAK,CAAC,CAAE;AAClC,OAAO,CAAC,WAAW,CAAG,KAAK,CAAC,AAC/B;AAAM;AACH,OAAO,CAAC,WAAW,CAAG,IAAI,CAAC,AAC9B,CACJ,kCAbY,cACoB,IAAI,CAAC,MAAM,CAAnC,SAAS,UAAT,SAAS,CAAE,SAAS,UAAT,SAAS,CACzB,OAAO,SAAS,CAAC,WAAW,CAAG,IAAI,CAAG,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,AACzE;;;;;AAauB;AACO,IAAI,CAAC,MAAM,CAAjC,OAAO,UAAP,OAAO,CAAE,SAAS,UAAT,SAAS;AACvB,OAAO,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,SAAA,IAAI,SAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA,CAAC,CAAA,AAChF;;;;AAGc;AACX,OAAO,uBAAS,IAAI,CAAC,MAAM,CAAC,CAAA,AAC/B,0KA3EoB,EAAE;;;;;AA+EZ,IAAI,WAAW,EAAE","file":"StoreCombiner-compiled.js","sourcesContent":["/**\n * Created by grahamallen on 1/27/17.\n */\nimport {observable, computed, action, reaction, when } from 'mobx'\nimport Api from '../api/index'\nimport _ from 'lodash';\n//import {UiStore, ColorStore, UserStore, WordStore, UndoStore, NumberStore} from './substores/'\nimport {snapshot, resetSnapshot} from './models/Snapshot'\nimport {subStores} from './substores/'\n\nclass GlobalStore {\n\n    @observable stores = {};\n\n    constructor() {\n        _.forEach(subStores, (store, key) => {\n            this.stores[store.constructor.name] = store\n        });\n        var {UndoStore, UiStore} = this.stores;\n        reaction(\n            () => this.snapshot,\n            async (snapshot) => {\n                UndoStore.pushSnapshot(snapshot);\n                //await this.saveDraft(snapshot);\n                console.log(UndoStore.snapshots.length);\n            }\n        );\n        //when(() => UiStore.loggedIn, this.displayUser);\n\n        //reaction(() => UndoStore.snapshot, () => UiStore.displayUndo = true)\n        reaction(() => this.snapshot, () => this.calculateUndo());\n    }\n\n    @action\n    resetState() {\n        let {UndoStore, UiStore} = this.stores;\n        resetSnapshot(UndoStore.snapshots[0], this.stores);\n        UndoStore.popSnapshot();\n    }\n\n    @action\n    login() {\n        var {UserStore, UiStore} = this.stores;\n        UserStore.currentUser = Api.getCurrentUser();// await\n        UiStore.loggedIn = true;\n    }\n\n    @action\n    logout() {\n        var {UserStore, UiStore, ColorStore} = this.stores;\n        UserStore.currentUser = {};// async\n        UiStore.loggedIn = false;\n        ColorStore.setColor(0);\n    }\n\n    @action\n    displayUser() {\n        var {ColorStore} = this.stores;\n        ColorStore.setColor(2);\n\n    }\n\n    @computed\n    get phrase() {\n        var {UserStore, WordStore} = this.stores;\n        return WordStore.currentWord + \", \" + UserStore.currentUserStore.name;\n    }\n\n    @action\n    calculateUndo() {\n        var {UndoStore, UiStore} = this.stores;\n        if (UndoStore.snapshots.length === 0) {\n            UiStore.displayUndo = false;\n        } else {\n            UiStore.displayUndo = true;\n        }\n    }\n\n    @computed\n    get searchedUserStore() {\n        var {UiStore, UserStore} = this.stores;\n        return UserStore.users.filter(user => user.name.includes(UiStore.searchText))\n    }\n\n    @computed\n    get snapshot() {\n        return snapshot(this.stores)\n    }\n}\n\n\nexport default new GlobalStore();"]}