{"version":3,"sources":["index.js"],"names":[],"mappings":";;;AAGA,0BAAkE;AAClE,sCAAiC;AACjC,8BAAuB;;AAEjB,OAAO;AACc,KAAK;AACH,EAAE;AACD,KAAK;;;AAG7B,UAAU;;;;;;;;;;AAUU;AAClB,IAAI,CAAC,UAAU,EAAE,CAAA,AACpB;;;AAEgB,GAAG,CAAE;AAClB,IAAI,CAAC,UAAU,CAAG,GAAG,CAAA,AACxB,wCAX4B,KACpB,MAAM,CAAgB,IAAI,CAA1B,MAAM,CAAE,UAAU,CAAI,IAAI,CAAlB,UAAU,CACvB,OAAO,MAAM,CAAC,UAAU,CAAC,CAAC,AAC7B,2KAPoB,CAAC,MAAM,CAAE,KAAK,CAAE,OAAO,CAAC,wJAEpB,CAAC;;;;AAgBxB,WAAW;;;AAGP;AACF,IAAI,CAAC,aAAa,EAAE,CAAA,AACvB,mLAJ2B,CAAC;;;;AAO3B,SAAS;AACe,IAAI;;;AAG5B,SAAS;;;;;;;;;;AAUD,EAAE,CAAE;AACV,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAA,IAAI,SAAI,IAAI,CAAC,OAAO,GAAK,MAAM,CAAC,EAAE,CAAC,CAAA,CAAC,CAAA,AAC9D;;;;AAGc;AACX,GAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAG,CAAC,CAAE;AACnC,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAA,AAChC;AAAM;AACH,OAAO,IAAI,CAAC,AACf,CACJ,gLApB0B,EAAE,mJACT,EAAE,mKAGV,mLACW,gBAAI,SAAS,EAAE,SAAlC,MAAK,KAAK,wEACb;;;;;;AAkBC,SAAS;;;;AAIE,IAAI,CAAE;AACf,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,AAC7B;;;;AAGa;AACV,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,AACxB,+KAVuB,EAAE;;;;AAavB,IAAM,SAAS,SAAT,SAAS,CAAG;AACrB,IAAI,OAAO,EAAE;AACb,IAAI,UAAU,EAAE;AAChB,IAAI,SAAS,EAAE;AACf,IAAI,SAAS,EAAE;AACf,IAAI,SAAS,EAAE;AACf,IAAI,WAAW,EAAE,CACpB,CAAC","file":"index-compiled.js","sourcesContent":["/**\n * Created by grahamallen on 1/29/17.\n */\nimport {observable, computed, action, reaction, when } from 'mobx'\nimport Api from '../../api/index'\nimport _ from 'lodash';\n\nclass UiStore {\n    @observable loggedIn = false;\n    @observable searchText = \"\";\n    @observable displayUndo = false;\n}\n\nclass ColorStore {\n    @observable colors = [\"blue\", \"red\", \"green\"];\n\n    @observable colorIndex = 0;\n\n    @computed get currentColor() {\n        var {colors, colorIndex} = this;\n        return colors[colorIndex];\n    }\n\n    @action changeColor() {\n        this.colorIndex++\n    }\n\n    @action setColor(num) {\n        this.colorIndex = num\n    }\n}\n\nclass NumberStore {\n    @observable currentNumber = 2;\n    @action\n    add() {\n        this.currentNumber++\n    }\n}\n\nclass WordStore {\n    @observable currentWord = \"Hi\";\n}\n\nclass UserStore {\n    @observable currentUsers = {};\n    @observable users = [];\n\n    @action\n    getUserss = async () => {\n        this.users = await Api.getUserss();\n    };\n\n    @action\n    findUsers(id) {\n        return this.users.find(user => user.user_id === Number(id))\n    }\n\n    @computed\n    get username() {\n        if (this.currentUsers.name.length > 0) {\n            return this.currentUsers.name\n        } else {\n            return null;\n        }\n    }\n\n}\n\nclass UndoStore {\n    @observable snapshots = [];\n\n    @action\n    pushSnapshot(snap) {\n        this.snapshots.push(snap);\n    }\n\n    @action\n    popSnapshot() {\n        this.snapshots.pop();\n    }\n}\n\nexport const subStores = [\n    new UiStore(),\n    new ColorStore(),\n    new UserStore(),\n    new WordStore(),\n    new UndoStore(),\n    new NumberStore()\n];\n"]}